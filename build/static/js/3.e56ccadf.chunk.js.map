{"version":3,"sources":["containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css"],"names":["module","exports","checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onBurgerOrder","token","inputChangeHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","validationError","Label","label"],"mappings":"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","file":"static/js/3.e56ccadf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};","import React from \"react\";\n\nimport Burger from \"../../Burger/Burger\";\nimport Button from \"../../UI/Button/Button\";\nimport classes from \"./CheckoutSummary.module.css\";\n\nconst checkoutSummary = props => {\n  return (\n    <div className={classes.CheckoutSummary}>\n      <h1>I hope it tastes well!</h1>\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\n        <Burger ingredients={props.ingredients} />\n      </div>\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\n        CANCEL\n      </Button>\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\n        CONTINUE\n      </Button>\n    </div>\n  );\n};\n\nexport default checkoutSummary;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"../../../components/UI/Button/Button\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport classes from \"./ContactData.module.css\";\nimport axios from \"../../../axios-order\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../../store/actions/index\";\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your Name\"\n        },\n        value: \"\",\n        validation: { required: true },\n        valid: false,\n        touched: false\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Street\"\n        },\n        value: \"\",\n        validation: { required: true },\n        valid: false,\n        touched: false\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Postal Code\"\n        },\n        value: \"\",\n        validation: { required: true, minLength: 5, maxLength: 5 },\n        valid: false,\n        touched: false\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Country\"\n        },\n        value: \"\",\n        validation: { required: true },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Your E-Mail\"\n        },\n        value: \"\",\n        validation: { required: true },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            { value: \"fastest\", displayValue: \"Fastest\" },\n            { value: \"cheapest\", displayValue: \"Cheapest\" }\n          ]\n        },\n        value: \"fastest\",\n        validation: {},\n        valid: true\n      }\n    },\n    formIsValid: false\n  };\n\n  orderHandler = event => {\n    event.preventDefault();\n    const formData = {};\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[\n        formElementIdentifier\n      ].value;\n    }\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId\n    };\n\n    this.props.onBurgerOrder(order, this.props.token);\n  };\n\n  inputChangeHandler = (event, inputIdentifier) => {\n    const updatedFormElement = updateObject(\n      this.state.orderForm[inputIdentifier],\n      {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.orderForm[inputIdentifier].validation\n        ),\n        touched: true\n      }\n    );\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIdentifier]: updatedFormElement\n    });\n\n    let formIsValid = true;\n\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n  };\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(formElement => {\n          return (\n            <Input\n              key={formElement.id}\n              elementType={formElement.config.elementType}\n              elementConfig={formElement.config.elementConfig}\n              value={formElement.config.value}\n              invalid={!formElement.config.valid}\n              shouldValidate={formElement.config.validation}\n              touched={formElement.config.touched}\n              changed={event => this.inputChangeHandler(event, formElement.id)}\n            />\n          );\n        })}\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\n          ORDER\n        </Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your contact data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onBurgerOrder: (orderData, token) =>\n      dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withErrorHandler(ContactData, axios));\n","import React, { Component } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\nimport ContactData from \"./ContactData/ContactData\";\n\nclass Checkout extends Component {\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack();\n  };\n\n  checkoutContinuedHandler = () => {\n    this.props.history.replace(\"/checkout/contact-data\");\n  };\n\n  render() {\n    let summary = <Redirect to=\"/\" />;\n    if (this.props.ings) {\n      const purchasedRedirect = this.props.purchased ? (\n        <Redirect to=\"/\" />\n      ) : null;\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary\n            ingredients={this.props.ings}\n            checkoutCancelled={this.checkoutCancelledHandler}\n            checkoutContinued={this.checkoutContinuedHandler}\n          />\n          <Route\n            path={this.props.match.path + \"/contact-data\"}\n            component={ContactData}\n          />\n        </div>\n      );\n    }\n    return summary;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased\n  };\n};\n\nexport default connect(mapStateToProps)(Checkout);\n","import React from \"react\";\n\nimport classes from \"./Input.module.css\";\n\nconst input = props => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n  }\n\n  let validationError = null;\n\n  if (props.invalid && props.touched) {\n    validationError = <p>Please enter a valid value!</p>;\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  );\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};"],"sourceRoot":""}